//
// Created by Owner on 17-May-20.
//

#include "AlgErrorCodes.h"

string AlgErrorCodes::get_message(Value value) {
	switch (value) {
		case SHIP_PLAN_ILLEGAL_NUM_FLOORS:
			return WARNING_SHIP_PLAN_POS_FLOORS_LIMIT;
		case SHIP_PLAN_XY_IDX:
			return WARNING_SHIP_PLAN_XY_LIMIT;
		case SHIP_PLAN_BAD_POS_FORMAT:
			return WARNING_SHIP_PLAN_POS_DESCRIPTION;
		case SHIP_PLAN_BAD_FIRST_LINE_OR_READ_FAIL:
			return ERROR_SHIP_PLAN_BAD_FIRST_LINE_OR_UNREADABLE;
		case SHIP_PLAN_DUPLICATE_XY :
			return ERROR_SHIP_PLAN_DUP_XY_APPEARANCE;
		case ROUTE_DUPLICATE_CONSECUTIVE_PORT:
			return WARNING_ROUTE_PORT_APPEARS_CONSECUTIVELY;
		case ROUTE_ILLEGAL_PORT_SYMBOL:
			return WARNING_BAD_SYMBOL_FORMAT;
		case ROUTE_READ_FAIL_OR_FILE_EMPTY:
			return ERROR_ROUTE_EMPTY_OR_UNREADABLE;
		case ROUTE_ONLY_ONE_VALID_PORT:
			return ERROR_ROUTE_SINGLE_PORT;
		case CONTAINER_DUPLICATE_ID_ON_PORT:
			return WARNING_SAME_CONTAINER_ID_AT_PORT;
		case CONTAINER_ID_ALREADY_ON_SHIP:
			return WARNING_CONTAINER_ID_ALREADY_ON_SHIP;
		case CONTAINER_WEIGHT:
			return WARNING_CONTAINER_BAD_FORMAT_WEIGHT;
		case CONTAINER_PORT_DEST:
			return WARNING_CONTAINER_BAD_FORMAT_DEST;
		case CONTAINER_ID:
			return WARNING_CONTAINER_BAD_FORMAT_UNREADABLE_ID;
		case CONTAINER_ID_ISO:
			return WARNING_CONTAINER_ILLEGAL_ISO;
		case CONTAINERS_READ_FAIL:
			return WARNING_PORT_UNREADABLE;
		case CONTAINERS_LAST_PORT_HAS_CONTAINERS:
			return WARNING_LAST_PORT_HAS_CONTAINERS;
		case CONTAINERS_EXCEEDS_CAPACITY:
			return WARNING_TOTAL_CONTAINERS_EXCEEDS_SHIP_CAPACITY;
	}
	return "";
}